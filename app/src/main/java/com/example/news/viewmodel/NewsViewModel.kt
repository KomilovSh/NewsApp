package com.example.news.viewmodelimport android.util.Logimport androidx.lifecycle.ViewModelimport com.example.news.models.NewsResponseimport com.example.news.repository.Repositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.schedulers.Schedulersimport javax.inject.Inject@HiltViewModelclass NewsViewModel @Inject constructor(    repository: Repository) : ViewModel() {    private val TAG = "NewsViewModel"    private lateinit var repository: Repository    private lateinit var newsResponse: NewsResponse    fun getNewsResponse(): NewsResponse {        return newsResponse    }    fun fetchNews(country: String, apiKey: String) {        repository.getNews(country, apiKey)            .subscribeOn(Schedulers.io())            .observeOn(AndroidSchedulers.mainThread())            .subscribe({ value ->                newsResponse = value            }, { error ->                Log.d(TAG, "fetchNews: ${error.message}")            })    }}